#!/bin/bash

# 	Program: simpelsql
#	Description: This is an aggregation of mysql based commands. Most often used when working with the Drupal Database.
#	Author: Kurt L Vanderwater
#	  Copyright (C) 2007-2010 Meridian Data Systems, Inc.
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -o errexit
set -o nounset

# For this script to run properly, you must fill out all the required information.
# If you are lazy like me, you can run a file named simplesql.conf to initialize
# certain defaults and aliases.
#
# the format of this file should be as follows.

#> #!/bin/bash
#> 
#> # Setup Defaults
#> 
#> i=0
#> # Set up in the hostA variable the always working address to the server, followed by any aliases you like.
#> # all delimited by commas.
#> hostA[$i]="sql01.domain.com,sql01"
#> userA[$i]="root";										# Put the user for this server here
#> passwdA[$i]="<password here>";					# Put the password for this server here (usually for root)
#> DBNameA[$((i++))]="test";							# If you want a default database to end up in, this is the place.
#> 
#> hostA[$i]="sql02.domain.com,sql02,x9sql02"
#> userA[$i]="root"
#> passwdA[$i]="<password here>"
#> DBNameA[$((i++))]="test"
#> 
#> tempfile=`tempfile`
#> tfile2=`tempfile`
#> 
#> mode="edit"
#> host="sql01.doamain.com"
#> passwd=""
#> user="root"
#> DBName=""

[ -f /etc/simplesql.conf ] && source ~/etc/simplesql.conf
[ -f ~/bin/simplesql.conf ] && source ~/bin/simplesql.conf
[ -f simplesql.conf ] && source simplesql.conf

tempfile=`tempfile`
tfile2=`tempfile`
tfile3=`tempfile`

##########################################################
# Create the Usage variable to display if they need help #
##########################################################
usage=`cat <<EOF
	simplesql Copyright (C) 2007-2010 Meridian Data Systems, Inc.\n
    This program comes with ABSOLUTELY NO WARRANTY; for details read the source.\n
    This is free software, and you are welcome to redistribute it\n
    under certain conditions; See the included license.\n\n

	Usage:\n\n

	$0 [ -h ] [ -d <database> ] [ -f <filename> ] [ -m <mode> ] [ -n <new database> ] [ -p <password> ] [ -s <quoted script> ] [ -u <user> ]\n\n

	$(tput setaf 5)-h:$(tput setaf 9) Provide this usage page.\n\n

	$(tput setaf 5)-a <current Drupal admin password>:$(tput setaf 9) This is the current Drupal admin password. If this doesn't match, we don't run\n\n

	$(tput setaf 5)-b <new Drupal admin password>:$(tput setaf 9) This is the new, replacement Drupal admin password. see -a for trigger\n\n

	$(tput setaf 5)-d <database>:$(tput setaf 9) Enter the name of the database that you are operating against.\n\n

	$(tput setaf 5)-f <filename>:$(tput setaf 9) This is a script file with multiple semi-colon terminated mysql commands.\n\n

	$(tput setaf 5)-i <findstr>:$(tput setaf 9) This is a string that you wish to search for.\n\n

	$(tput setaf 5)-m <mode>:$(tput setaf 9) This defines the different modes that this script can operate in.\n
		\tdump - Dump the named database to a file with the name of the database.dump.\n
		\timport - Run the database.dump file created by the dump command above. This is a restore and not a merge.\n
		\tdumpdrupal - Dump the named database to a file with the name of the database.drupal.dump.\n
			\t\tThe purpose of this variant is to only get the structure for cache, session, & watchdog tables.\n
			\t\tAlong with all the data from the rest of the tables.\n
		\tdrupalfind - Search a given Drupal database for all occurances of a string.\n
		\tcopy - Copy a database into another existing database name.\n
				\t\tThis will NOT recreate the new database. It will clear\n
				\t\tany existing tables. It will add any new tables.\n
		\tclone - Copy a database into a new database.\n
		\trun - run the script provided on the command line by -s <quoted script>.\n
		\trunfile - run the script command(s) provided in the file named by -f <filename>.\n
		\texport - create a CSV file output from the dabase.\n
		\tedit - Go into command line mode of mysql.\n
		\tshow - Show a list of tables for the database.\n
		\tstats - launch mytop if it is available\n\n
		\talter - Alter ALL Drupal admin passwords
		\tcheckall - check extended all tables in the database.\n
		\trepairall - repair extended all tables in the database.\n

	$(tput setaf 5)-n <new database>:$(tput setaf 9) The name of the new database for copy or clone.\n\n

	$(tput setaf 5)-o <host>:$(tput setaf 9) The host server where the database exists.\n\n

	$(tput setaf 5)-p <password>:$(tput setaf 9) The password needed by the user (-u) to access the database.\n\n

	$(tput setaf 5)-s <quoted script>:$(tput setaf 9) This is a quoted string that is a mysql command script.\n\n

	$(tput setaf 5)-t <table name>:$(tput setaf 9) This is the table that you want to export.\n\n

	$(tput setaf 5)-u <user>:$(tput setaf 9) The username that has access to the database.\n\n

	$(tput setaf 5)-x <CSV export file>:$(tput setaf 9) The output filename you want your CSV export to end up in.\n\n

EOF`

################################################
# Accept and parse all the incoming parameters #
################################################
while getopts ":hm:a:b:d:n:o:p:s:t:u:f:i:x:" options ; do
	case $options in
		m ) mode=$OPTARG;;
		a ) DrupO=$OPTARG;;
		b ) DrupN=$OPTARG;;
		d ) DBName=$OPTARG;;
		n ) DBNameNew=$OPTARG;;
		o ) host=$OPTARG;;
		p ) passwd=$OPTARG;;
		s ) script=$OPTARG;;
		t ) table=$OPTARG;;
		u ) user=$OPTARG;;
		f ) filename=$OPTARG;;
		x ) xport=$OPTARG;;
		i ) findstr=$OPTARG;;
		h ) mode="help";;
	esac
done

###############################################
# Based on the 'host' variable, check aliases #
# and select the host. If the passwd, user,   #
# or DBName variables were not passed in,     #
# then set them to known defaults.            #
###############################################
for (( i=0; i<$((${#hostA[@]})); i=i+1 )); do
	# echo ${alias[i]}

	# echo -n "$a :: "
	set -- `echo ${hostA[i]} | tr , \ `
	temp=$1
	while [ ${#1} -gt 0 ]; do
		if [ $1 == $host ]; then
			host=$temp
			if [[ ! $passwd ]];then
				passwd=${passwdA[i]}
			fi
			if [[ ! $user ]];then
				user=${userA[i]}
			fi
			if [[ ! $DBName ]];then
				DBName=${DBNameA[i]}
			fi
		fi
		shift
	done
done

################################################
# Based on the mode given, execute the command #
################################################
case $mode in
	########################################################
	# Do a mysqldump of a specific database                #
	# Normally, if I do the dump, it is because            #
	# I want to look at it. So, the --skip-extended-insert #
	# option so I can actually read the records            #
	#                                                      #
	# Required parameters:                                 #
	#	host - what server are we on?                        #
	#	user - what user do we use to access our DB          #
	#	passwd - The password needed                         #
	#	DBName - The database we need a dump of              #
	########################################################
	"dump" )  # Dump a copy of the database into $DBName.dump
		echo "mysqldump --skip-extended-insert -h $host -u $user -p$passwd $DBName > $DBName.dump"
		mysqldump --skip-extended-insert -h $host -u $user -p$passwd $DBName > $DBName.dump
		;;

	########################################################
	# Do a mysqldump of a specific database just for the   #
	# structure.                                           #
	#                                                      #
	# Required parameters:                                 #
	#	host - what server are we on?                        #
	#	user - what user do we use to access our DB          #
	#	passwd - The password needed                         #
	#	DBName - The database we need a dump of              #
	########################################################
	"dumpmeta" )  # Dump a copy of the metadata about the database into $DBName.meta
		echo "mysqldump --no-data -h $host -u $user -p$passwd $DBName > $DBName.meta"
		mysqldump --no-data -h $host -u $user -p$passwd $DBName > $DBName.meta
		;;

	################################################
	# Show a list of a the tables in the Database  #
	#                                              #
	# Required parameters:                         #
	#	host - what server are we on?                #
	#	user - what user do we use to access our DB  #
	#	passwd - The password needed                 #
	#	DBName - The database we need a dump of      #
	################################################
	"show" )  # Show a list of tables in the $DBName database
		mysqlshow -h $host -u $user -p$passwd $DBName 
		;;

	#######################################################
	# Do a Drupal Dump... This is for a Drupal database   #
	# It is meant to dump all the data, but to leave      #
	# behind any cache, session, or watchdog information. #
	# The purpose here is to keep the size of the backup  #
	# WAY down....                                        #
	#                                                     #
	# Required parameters:                                #
	#	host - what server are we on?                       #
	#	user - what user do we use to access our DB         #
	#	passwd - The password needed                        #
	#	DBName - The database we need a dump of             #
	#######################################################
	"dumpdrupal" )  
		mysql -h $host -u $user -p$passwd  $DBName -Bs -e "show tables" > $tempfile

		rm -f ${DBName}.drupal.dump
		for t in `cat $tempfile`; do
			case $t in
				watchdog|sessions|cache|cache_[a-z]*)
					mysqldump --no-data -h $host -u $user -p$passwd $DBName $t >> ${DBName}.drupal.dump
					;;
				* )
					mysqldump --skip-extended-insert -h $host -u $user -p$passwd $DBName $t >> ${DBName}.drupal.dump
					;;
			esac
		done
		;;

	#######################################################
	# Do a Check [table] on all tables in the database    #
	#                                                     #
	# Required parameters:                                #
	#	host - what server are we on?                       #
	#	user - what user do we use to access our DB         #
	#	passwd - The password needed                        #
	#	DBName - The database we need a dump of             #
	#######################################################
	"checkall" )  
		mysql -h $host -u $user -p$passwd  $DBName -Bs -e "show tables" > $tempfile

		for t in `cat $tempfile`; do
			mysql -h $host -u $user -p$passwd $DBName -Bs -e "check table $t extended"
		done
    rm -f $tempfile
		;;

	#######################################################
	# Do a Repair [table] on all tables in the database   #
	#                                                     #
	# Required parameters:                                #
	#	host - what server are we on?                       #
	#	user - what user do we use to access our DB         #
	#	passwd - The password needed                        #
	#	DBName - The database we need a dump of             #
	#######################################################
	"repairall" )  
		mysql -h $host -u $user -p$passwd  $DBName -Bs -e "show tables" > $tempfile

		for t in `cat $tempfile`; do
			mysql -h $host -u $user -p$passwd $DBName -Bs -e "repair table $t extended"
		done
    rm -f $tempfile
		;;

	#######################################################
	# Do a Drupal Find... This is for a Drupal database   #
	# It is meant to search through all the tables to     #
	# all occurances of a string. It ignores the cache    #
	# tables along with the sessions and watchdog.        #
	#                                                     #
	# Required parameters:                                #
	#	host - what server are we on?                       #
	#	user - what user do we use to access our DB         #
	#	passwd - The password needed                        #
	#	DBName - The database we need a dump of             #
	#	findstr - The string you want to search for         #
	#######################################################
	"drupalfind" )  
		echo "Running drupalfind -- Searching for $findstr"
		echo "Output written to: $tfile3"
		mysql -h $host -u $user -p$passwd  $DBName -Bs -e "show tables" > $tempfile

		rm -f ${DBName}.drupal.dump
		for t in `cat $tempfile`; do
			case $t in
				watchdog|sessions|cache|cache_[a-z]*)
					;;
				* )
					set +o errexit
					mysqldump --skip-extended-insert -h $host -u $user -p$passwd $DBName $t | grep "$findstr" > $tfile2
					set -o errexit
					;;
			esac
			if [ -s $tfile2 ]; then
				echo "=================" >> $tfile3
				echo $t >> $tfile3
				echo "=================" >> $tfile3
				cat $tfile2 >> $tfile3
			fi	
		done
		cat $tfile3
		;;

	#######################################################
	# Restore a .dump file that has been created by the   #
	# 'dump' command defined above.                       #
	# behind any cache, session, or watchdog information. #
	# The purpose here is to keep the size of the backup  #
	# WAY down....                                        #
	#                                                     #
	# Required parameters:                                #
	#	host - what server are we on?                       #
	#	user - what user do we use to access our 'New' DB   #
	#	passwd - The password needed for the 'New' DB       #
	#	DBName - The database we have a dump of             #
	#	DBNameNew - The database we are restoring to        #
	#######################################################
	"import" )	#Import from the .dump file into a database
		echo Importing into $DBNameNew 
		mysql -h $host -u $user -p$passwd $DBNameNew < $DBName.dump
		;;

	#######################################################
	# This is a combination of the 'dump' command and the #
	# 'import' command. The is a small issue here in that #
	# the host, user, & password must be the same for     #
	# both databases. Both Databases must ALREADY exist.  #
	#                                                     #
	# Required parameters:                                #
	#	host - what server are we on?                       #
	#	user - what user do we use to access both DB's      #
	#	passwd - The password needed for both DB's          #
	#	DBName - The source database                        #
	#	DBNameNew - The destination database                #
	#######################################################
	"copy" )			# Make a copy of a database into an existing one.
		echo "Clearing destination database of all tables"
		mysql -h $host -u $user -p$passwd  $DBNameNew -Bs -e "show tables" > $tempfile
		for t in `cat $tempfile`; do
			set +o errexit
			mysql -h $host -u $user -p$passwd $DBNameNew -Bs -e "drop table $t"
			set -o errexit
		done
		echo "Dumpfile file to $tempfile"
		mysqldump -h $host -u $user -p$passwd $DBName > $tempfile
		echo "Importing $tempfile to $DBNameNew"
		mysql -h $host -u $user -p$passwd $DBNameNew < $tempfile
		echo "Done! $tempfile still available in case you screwed up!"
		;;

	#######################################################
	# This routine will make a backup of a database and   #
	# then CREATE a NEW database to restore the backup    #
	# to. Again, the hosts, user, & password must be the  #
	# same for both databases.                            #
  #                                                     #
	# Required parameters:                                #
	#	host - what server are we on?                       #
	#	user - what user do we use to access both DB's      #
	#	passwd - The password needed for both DB's          #
	#	DBName - The source database                        #
	#	DBNameNew - The destination database                #
	#######################################################
	"clone" ) 		# Make a clone of a database into a new one.
		echo "Dumpfile file to $tempfile"
		mysqldump -h $host -u $user -p$passwd $DBName > $tempfile
		echo "Creating the new database $DBNameNew"
		cat <<EOF > $tfile2
create database if not exists $DBNameNew;
quit
EOF
		mysql -h $host -u $user -p$passwd < $tfile2
		rm -f $tfile2
		echo "Importing $tempfile to $DBNameNew"
		mysql -h $host -u $user -p$passwd $DBNameNew < $tempfile
		echo "Done! $tempfile still available in case you screwed up!"
		;;

	#######################################################
	# This will allow for an arbitrary mysql command to   #
	# run. It is run agains the database. If you want to  #
	# string multiple command together, use ';' between   #
	# each command.                                       #
  #                                                     #
	# Required parameters:                                #
	#	host - what server are we on?                       #
	#	user - what user do we use to access both DB's      #
	#	passwd - The password needed for both DB's          #
	#	DBName - The source database                        #
	#######################################################
	"run" )			# Run a quote enclosed script against a database
		cat <<EOF > $tempfile
$script;
quit
EOF
		mysql -h $host -u $user -p$passwd $DBName <$tempfile
		;;

	#######################################################
	# This will allow for an arbitrary set of mysql       #
	# commands to be run. Build a file with each command  #
	# on a separate line. Terminate each line with ';'    #
  #                                                     #
	# Required parameters:                                #
	#	host - what server are we on?                       #
	#	user - what user do we use to access both DB's      #
	#	passwd - The password needed for both DB's          #
	#	DBName - The source database                        #
	#	filename - The name of the script file              #
	#######################################################
	"runfile" )		# Run a script file against a database
		echo Running script on $DBName
		mysql -h $host -u $user -p$passwd $DBName < $filename
		;;

	#######################################################
	# This provides you with Command Line Interface into  #
	# mysql.                                              #
  #                                                     #
	# Required parameters:                                #
	#	host - what server are we on?                       #
	#	user - what user do we use to access both DB's      #
	#	passwd - The password needed for both DB's          #
	#	DBName - The source database                        #
	#######################################################
	"edit" )	# Go into raw mysql mode on a database
		# echo "Host: $host - User: $user - Password: $passwd - DB: $DBName"
	   echo "SQL CLI on $host for User $user using Password $passwd in DB $DBName"
		mysql -h $host -u $user -p$passwd $DBName
		;;

	#######################################################
	# Export a table in the database in a CSV format.     #
  #                                                     #
	# Required parameters:                                #
	#	host - what server are we on?                       #
	#	user - what user do we use to access both DB's      #
	#	passwd - The password needed for both DB's          #
	#	DBName - The source database                        #
	#	table - The source tablename                        #
	#	xport - The name of the output file in CSV format   #
	#######################################################
	"export" ) #Export into CSV format
		#SELECT * INTO OUTFILE '/somefile.csv' 
		#FIELDS ESCAPED BY '\' 
		#FIELDS OPTIONALLY ENCLOSED BY '"'
		#FIELDS TERMINATED BY ',' 
		#LINES TERMINATED BY '\n' 
		#FROM table WHERE column='value'";
		echo Running CSV export on Database: $DBName and Table: $table
		cat <<EOF > $tfile2
SELECT * INTO OUTFILE '$xport' 
FIELDS ESCAPED BY '\' 
OPTIONALLY ENCLOSED BY '"'
TERMINATED BY ',' 
LINES TERMINATED BY '\n' 
FROM $table";
quit
EOF
		mysql -h $host -u $user -p$passwd $DBName <$tfile2 >$xport
		;;

	#######################################################
	# Provide a 'top' like statistics for your mysql      #
  # server.                                             #
  #                                                     #
	# Required parameters:                                #
	#	host - what server are we on?                       #
	#	user - what user do we use to access both DB's      #
	#	passwd - The password needed for both DB's          #
  #                                                     #
  # You must have the mytop package installed for this  #
  # to work.                                            #
	#######################################################
	"stats" )
		set +o errexit
		which mytop > /dev/null 2>&1
		rc=$?
		if [ $rc -eq 0 ]; then
			mytop -u $user -p $passwd -h $host -s 3
		else
			echo -e $usage
			cat <<EOF

$(tput setaf 1)ERROR:$(tput setaf 9)

You have attempted run the statistics portion of this script.
It is a requirement of this that you have available the 'mytop' package.

To Install on various platforms
===============================
GENTOO: emerge -avt mytop

EOF
		fi
		set -o errexit
		;;

	#######################################################
	# Alters ALL admin password within all drupal DBs     #
  # on a specified server. You must provide the old     #
	# and new admin passwords. If the old password does   #
	# not match what is currently in the database, it is  #
	# assumed that the password is NOT TO BE CHANGED.     #
  #                                                     #
	# Required parameters:                                #
	#	host - what server are we on?                       #
	#	user - what user do we use to access both DB's      #
	#	passwd - The password needed for both DB's          #
	#  DrupO - The current drupal admin (user 1) password #
	#  DrupN - The new drupal admin (user 1) password     #
	#######################################################
	"alter" )
		[ ${DrupO:=fred} = "fred" ] && echo "Error :: you must provide the old Drupal Admin password (-a)" && exit 1
		[ ${DrupN:=fred} = "fred" ] && echo "Error :: you must provide the new Drupal Admin password (-b)" && exit 1
		dblist=`mysql -h $host -u $user -p$passwd -Bs -e "select table_schema from tables where table_name = 'node'" information_schema`
		/bin/rm -f $tempfile
		for d in $dblist; do
			mysql -h $host -u $user -p$passwd -Bs -e "select \"$d\" from users where uid = 1 and pass = md5('$DrupO')" $d  >> $tempfile
		done
		for d in `cat $tempfile`; do
			mysql -h $host -u $user -p$passwd -Bs -e "select \"$d - old:\", name, pass from users where uid = 1 and pass = md5('$DrupO')" $d 
			mysql -h $host -u $user -p$passwd -Bs -e "update users set pass = md5('$DrupN') where uid = 1 and pass = md5('$DrupO')" $d 
			mysql -h $host -u $user -p$passwd -Bs -e "select \"$d - new:\", name, pass from users where uid = 1 and pass = md5('$DrupN')" $d 
			echo -----
		done
		;;

	#######################################################
	# Well, you didn't chose anything, and no default was #
	# supplied, so here is the usage description          #
	#######################################################
	* ) 				# user error... show the usage page.
		echo -e $usage
		;;
esac
